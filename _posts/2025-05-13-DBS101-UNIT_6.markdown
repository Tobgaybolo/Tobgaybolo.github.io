---
layout: post
title:  "UNIT_6"
date:   2025-05-13
description: A Comprehensive Guide to Database aIndexing and Query Processing
---

<p class="intro"><span class="dropcap">I</span>n the world of database management systems, two fundamental concepts govern performance: indexing and query processing. This guide explores these critical topics in depth, drawing from academic lessons to provide practical insights for database professionals and students alike.</p>

### Database Indexing Fundamentals

#### What are Indexes?

Database indexes are special lookup tables (or data structures in document databases) that database search engines use to speed up data retrieval. Without indexes, every query would need to scan entire tables - an inefficient process that becomes unreasonably expensive for large datasets.

#### Key Benefits:
- Dramatically faster data retrieval
- Reduced I/O operations
- Efficient processing of queries that fetch few records

![Alt text](/assets/img/index.png)
Query performance comparison with and without indexes

#### Types of Indices
1. Ordered Indices
Store search key values in sorted order and associate each key with corresponding records. Two main types:

        a. Clustering Index (Primary Index)

        Records are physically stored in the same order as index entries

        Each entry contains a search key value and pointer to the first matching record

        Typically uses the primary key as the search key

        b. Non-clustering Index (Secondary Index)

        Records aren't stored in index order

        Each entry contains a search key value and pointers to all matching records

2. Hashed Indices
Values distributed uniformly across buckets via hash functions

Each bucket can hold one or more records

Excellent for equality lookups but doesn't support range queries

#### Index Implementation Techniques

**Dense Index**
- Contains an entry for every search-key value in the file
- For clustering: points to first record with each key value
- For non-clustering: stores list of pointers to all records with same key

**Sparse Index**
- Contains entries only for some search-key values
- Only works with clustering indices (sorted data)
- Each entry points to first record with that key value

#### Multilevel Indexing
For large relations where indexes don't fit in memory:

1. Inner Index: Main index stored on disk

2. Outer Index: Smaller index containing subset of inner index entries, fits in memory

**Search Process:**
1. Binary search on in-memory outer index

2. Read only relevant inner index blocks from disk

3. Locate target records

#### The B-Tree Family
**B-Tree Characteristics**
- Self-balancing search tree with multiple keys per node

- Each node (except root) has between n/2 and n children

- All leaf nodes at same depth

- Optimized for disk storage with minimized height

**B-Tree (Most Common Variant)**
- Perfectly balanced tree with equal path lengths

- Inner nodes guide search; only leaf nodes store values

- Supports efficient searches, inserts, and deletes in O(log n) time

**B-Tree VS B+ Tree:**

Original B-Tree stores keys/values in all nodes

B+ Tree only stores values in leaf nodes

#### Hash Indices
**How Hashing Works:**

1. Hash function maps keys to bucket addresses

2. Records with same hash value stored in same bucket

3. Overflow chaining handles bucket collisions

**Static vs Dynamic Hashing:**

- Static: Fixed buckets, requires rebuild if data grows

- Dynamic: Buckets increase incrementally (e.g., linear hashing)

### Query Processing Essentials

#### What is Query Processing?
The range of activities involved in extracting data from a database:

1. Translating high-level queries to physical operations

2. Optimizing query execution

3. Actual query evaluation

#### Key Steps
1. Parsing and Translation
- Syntax checking and validation

- Parse tree generation

- Conversion to relational algebra expression

- View substitution

- Creation of query evaluation plan

2. Evaluation
- Execution of operations in specified order

- Pipelining to avoid intermediate disk writes

- Iterator interface (open, get_next, close)

3. Optimization
- Choosing least-cost evaluation plan

- Based on data statistics and operation costs

- Balancing resource consumption vs response time

#### Execution Strategies
**Pipelined Execution**
- Operations process tuples as they're produced

- Avoids writing intermediate results to disk

- Uses iterator interface for synchronization

**Materialization**
- Stores intermediate results in temporary relations

- Useful when operators need to examine tuples multiple times

- Higher cost due to disk I/O for temp tables

#### Cost Measurement

**Modern Considerations:**

- SSDs reduce I/O cost (tS ~90µs, tT ~10µs for 4KB)

- CPU costs becoming more significant

- Cache-conscious algorithms for in-memory data

#### Operation Implementation
**Selection Operations**
- File scan (linear search) vs index access

- Clustering index best for equality on key

- Secondary index versatile but potentially costly

- Complex selections using conjunctions/disjunctions

**Sorting**
- External sort-merge for large datasets:

    1. Create sorted runs that fit in memory

    2. Merge runs using N-way merge

**Join Operations**
1. **Nested-Loop Join**: Simple but expensive (O(n²))

2. **Block Nested-Loop**: Reduces disk accesses

3. **Indexed Nested-Loop**: Uses indexes for faster lookup

4. **Merge Join**: Efficient for sorted relations

**Other Operations**
- **Duplicate elimination**: Via sorting or hashing

- **Projection**: With optional duplicate removal

- **Set operations**: Union, intersection, difference

- **Aggregation**: Using grouping attributes

- **Outer joins**: Extending basic joins

#### Advanced Techniques
**Cache-Conscious Algorithms**
- Optimize for CPU cache hierarchy (L1/L2/L3)

- Cache-conscious sort: Run sizes fitting cache

- Cache-conscious hash join: Partition to fit cache

**Query Compilation**
- Compile query plans to machine code

- Avoid interpretation overhead

- Potential 10x speed improvement

#### Practical Applications
**Indexing Best Practices**
1. Create clustered indexes on primary keys

2. Add non-clustered indexes for frequent query filters

3. Balance index benefits with update overhead

4. Monitor and rebuild indexes periodically

**Query Optimization Tips**
1. Analyze query execution plans

2. Look for full table scans (potential missing indexes)

3. Consider pipelining vs materialization tradeoffs

4. Tune memory allocation for sorting/hashing

5. Utilize appropriate join algorithms

#### Conclusion
Understanding database indexing and query processing is fundamental for designing efficient database systems. Indexes provide the fast access paths that make queries performant, while query processing techniques determine how these paths are utilized effectively.

Modern databases continue to evolve these concepts with innovations like:

   -  Adaptive indexing

   -  Just-in-time compilation

   -  Machine learning for query optimization

   -  Hybrid transactional/analytical processing

By mastering these core concepts, database professionals can ensure their systems deliver optimal performance across various workloads and scale efficiently with growing data volumes.